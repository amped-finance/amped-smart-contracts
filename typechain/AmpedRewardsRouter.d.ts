/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AmpedRewardsRouterInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "ampToken()": FunctionFragment;
    "ampedToken()": FunctionFragment;
    "bonusGmxTracker()": FunctionFragment;
    "claimAllRewards(bool,bool,bool,bool)": FunctionFragment;
    "claimAllRewardsForAccount(address,bool,bool,bool,bool)": FunctionFragment;
    "esAmpToken()": FunctionFragment;
    "feeGlpTracker()": FunctionFragment;
    "feeGmxTracker()": FunctionFragment;
    "getClaimableRewards(address)": FunctionFragment;
    "glpVester()": FunctionFragment;
    "gmxVester()": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "minAmountOut()": FunctionFragment;
    "rewardRouter()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setMinAmountOut(uint256)": FunctionFragment;
    "setRewardTrackers(address,address,address,address,address,address,address)": FunctionFragment;
    "setSwapEnabled(bool)": FunctionFragment;
    "stakedGlpTracker()": FunctionFragment;
    "stakedGmxTracker()": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ampToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ampedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values: [boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewardsForAccount",
    values: [string, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "esAmpToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "glpVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmxVester", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTrackers",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedGlpTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ampToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ampedToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewardsForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "esAmpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeGlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glpVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmxVester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedGlpTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "HandlerSet(address,bool)": EventFragment;
    "MinAmountOutSet(uint256)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256,uint256)": EventFragment;
    "SwapEnabledSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinAmountOutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapEnabledSet"): EventFragment;
}

export type HandlerSetEvent = TypedEvent<
  [string, boolean] & { handler: string; isActive: boolean }
>;

export type MinAmountOutSetEvent = TypedEvent<
  [BigNumber] & { minAmountOut: BigNumber }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    account: string;
    gmxAmount: BigNumber;
    esGmxAmount: BigNumber;
    wethAmount: BigNumber;
    ampedReceived: BigNumber;
  }
>;

export type SwapEnabledSetEvent = TypedEvent<[boolean] & { enabled: boolean }>;

export class AmpedRewardsRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AmpedRewardsRouterInterface;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ampToken(overrides?: CallOverrides): Promise<[string]>;

    ampedToken(overrides?: CallOverrides): Promise<[string]>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    claimAllRewards(
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAllRewardsForAccount(
      _account: string,
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    esAmpToken(overrides?: CallOverrides): Promise<[string]>;

    feeGlpTracker(overrides?: CallOverrides): Promise<[string]>;

    feeGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    getClaimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        claimableGmx: BigNumber;
        claimableEsGmx: BigNumber;
        claimableWeth: BigNumber;
      }
    >;

    glpVester(overrides?: CallOverrides): Promise<[string]>;

    gmxVester(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _esAmpToken: string,
      _weth: string,
      _rewardRouter: string,
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    minAmountOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRouter(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardTrackers(
      _gmxVester: string,
      _glpVester: string,
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      _stakedGlpTracker: string,
      _feeGlpTracker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<[string]>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  ampToken(overrides?: CallOverrides): Promise<string>;

  ampedToken(overrides?: CallOverrides): Promise<string>;

  bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

  claimAllRewards(
    _claimGmx: boolean,
    _claimEsGmx: boolean,
    _claimWeth: boolean,
    _convertToAmped: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAllRewardsForAccount(
    _account: string,
    _claimGmx: boolean,
    _claimEsGmx: boolean,
    _claimWeth: boolean,
    _convertToAmped: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  esAmpToken(overrides?: CallOverrides): Promise<string>;

  feeGlpTracker(overrides?: CallOverrides): Promise<string>;

  feeGmxTracker(overrides?: CallOverrides): Promise<string>;

  getClaimableRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      claimableGmx: BigNumber;
      claimableEsGmx: BigNumber;
      claimableWeth: BigNumber;
    }
  >;

  glpVester(overrides?: CallOverrides): Promise<string>;

  gmxVester(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ampedToken: string,
    _ampToken: string,
    _esAmpToken: string,
    _weth: string,
    _rewardRouter: string,
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  minAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRouter(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmountOut(
    _minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardTrackers(
    _gmxVester: string,
    _glpVester: string,
    _stakedGmxTracker: string,
    _bonusGmxTracker: string,
    _feeGmxTracker: string,
    _stakedGlpTracker: string,
    _feeGlpTracker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedGlpTracker(overrides?: CallOverrides): Promise<string>;

  stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ampToken(overrides?: CallOverrides): Promise<string>;

    ampedToken(overrides?: CallOverrides): Promise<string>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

    claimAllRewards(
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewardsForAccount(
      _account: string,
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    esAmpToken(overrides?: CallOverrides): Promise<string>;

    feeGlpTracker(overrides?: CallOverrides): Promise<string>;

    feeGmxTracker(overrides?: CallOverrides): Promise<string>;

    getClaimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        claimableGmx: BigNumber;
        claimableEsGmx: BigNumber;
        claimableWeth: BigNumber;
      }
    >;

    glpVester(overrides?: CallOverrides): Promise<string>;

    gmxVester(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _esAmpToken: string,
      _weth: string,
      _rewardRouter: string,
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    minAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouter(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardTrackers(
      _gmxVester: string,
      _glpVester: string,
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      _stakedGlpTracker: string,
      _feeGlpTracker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapEnabled(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<string>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HandlerSet(address,bool)"(
      handler?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { handler: string; isActive: boolean }
    >;

    HandlerSet(
      handler?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { handler: string; isActive: boolean }
    >;

    "MinAmountOutSet(uint256)"(
      minAmountOut?: null
    ): TypedEventFilter<[BigNumber], { minAmountOut: BigNumber }>;

    MinAmountOutSet(
      minAmountOut?: null
    ): TypedEventFilter<[BigNumber], { minAmountOut: BigNumber }>;

    "RewardsClaimed(address,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      gmxAmount?: null,
      esGmxAmount?: null,
      wethAmount?: null,
      ampedReceived?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        gmxAmount: BigNumber;
        esGmxAmount: BigNumber;
        wethAmount: BigNumber;
        ampedReceived: BigNumber;
      }
    >;

    RewardsClaimed(
      account?: string | null,
      gmxAmount?: null,
      esGmxAmount?: null,
      wethAmount?: null,
      ampedReceived?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        gmxAmount: BigNumber;
        esGmxAmount: BigNumber;
        wethAmount: BigNumber;
        ampedReceived: BigNumber;
      }
    >;

    "SwapEnabledSet(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    SwapEnabledSet(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ampToken(overrides?: CallOverrides): Promise<BigNumber>;

    ampedToken(overrides?: CallOverrides): Promise<BigNumber>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    claimAllRewards(
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAllRewardsForAccount(
      _account: string,
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    esAmpToken(overrides?: CallOverrides): Promise<BigNumber>;

    feeGlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    feeGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    glpVester(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVester(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _esAmpToken: string,
      _weth: string,
      _rewardRouter: string,
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouter(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardTrackers(
      _gmxVester: string,
      _glpVester: string,
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      _stakedGlpTracker: string,
      _feeGlpTracker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<BigNumber>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAllRewards(
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAllRewardsForAccount(
      _account: string,
      _claimGmx: boolean,
      _claimEsGmx: boolean,
      _claimWeth: boolean,
      _convertToAmped: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    esAmpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    glpVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _esAmpToken: string,
      _weth: string,
      _rewardRouter: string,
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmountOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardTrackers(
      _gmxVester: string,
      _glpVester: string,
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      _stakedGlpTracker: string,
      _feeGlpTracker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedGlpTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
