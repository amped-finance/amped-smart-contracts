/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AmpedStakingRouterInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "STAKE_TYPEHASH()": FunctionFragment;
    "UNSTAKE_TYPEHASH()": FunctionFragment;
    "ampToken()": FunctionFragment;
    "ampedToken()": FunctionFragment;
    "bonusGmxTracker()": FunctionFragment;
    "depositTokens(address,uint256)": FunctionFragment;
    "feeGmxTracker()": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "minAmountOut()": FunctionFragment;
    "minReserveRatio(address)": FunctionFragment;
    "mintAndStakeGlp(address,uint256,uint256,uint256)": FunctionFragment;
    "mintAndStakeGlpETH(uint256,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "rewardRouter()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setMinAmountOut(uint256)": FunctionFragment;
    "setMinReserveRatio(address,uint256)": FunctionFragment;
    "setRewardRouter(address)": FunctionFragment;
    "setRewardTrackers(address,address,address)": FunctionFragment;
    "setSwapEnabled(bool)": FunctionFragment;
    "setSwapRouter(address)": FunctionFragment;
    "setWeth(address)": FunctionFragment;
    "stakeAmped(uint256)": FunctionFragment;
    "stakeAmpedForAccount(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "stakedGmxTracker()": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "totalDeposited(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstakeAmped(uint256)": FunctionFragment;
    "unstakeAmpedForAccount(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSTAKE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ampToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ampedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minReserveRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeGlp",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndStakeGlpETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReserveRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTrackers",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setWeth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeAmped",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmpedForAccount",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedGmxTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeAmped",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAmpedForAccount",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ampToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ampedToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeGlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndStakeGlpETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWeth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAmped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmpedForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedGmxTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAmped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAmpedForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "GovSet(address,address)": EventFragment;
    "HandlerSet(address,bool)": EventFragment;
    "Initialized(address,address,address,address,address)": EventFragment;
    "MinAmountOutSet(uint256)": EventFragment;
    "MinReserveRatioSet(address,uint256)": EventFragment;
    "MintAndStakeGlp(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "ReserveDeposited(address,uint256)": EventFragment;
    "ReserveWithdrawn(address,uint256)": EventFragment;
    "RewardRouterSet(address,address)": EventFragment;
    "RewardTrackersSet(address,address,address)": EventFragment;
    "StakeAmped(address,uint256,uint256)": EventFragment;
    "SwapEnabledSet(bool)": EventFragment;
    "SwapRouterSet(address,address)": EventFragment;
    "TokenWithdrawn(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnstakeAmped(address,uint256,uint256)": EventFragment;
    "WethSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinAmountOutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinReserveRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintAndStakeGlp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTrackersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAmped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapEnabledSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeAmped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WethSet"): EventFragment;
}

export type GovSetEvent = TypedEvent<
  [string, string] & { oldGov: string; newGov: string }
>;

export type HandlerSetEvent = TypedEvent<
  [string, boolean] & { handler: string; isActive: boolean }
>;

export type InitializedEvent = TypedEvent<
  [string, string, string, string, string] & {
    ampedToken: string;
    ampToken: string;
    rewardRouter: string;
    swapRouter: string;
    weth: string;
  }
>;

export type MinAmountOutSetEvent = TypedEvent<
  [BigNumber] & { minAmountOut: BigNumber }
>;

export type MinReserveRatioSetEvent = TypedEvent<
  [string, BigNumber] & { token: string; ratio: BigNumber }
>;

export type MintAndStakeGlpEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    account: string;
    token: string;
    amount: BigNumber;
    minUsdg: BigNumber;
    minGlp: BigNumber;
    glpAmount: BigNumber;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ReserveDepositedEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type ReserveWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type RewardRouterSetEvent = TypedEvent<
  [string, string] & { oldRewardRouter: string; newRewardRouter: string }
>;

export type RewardTrackersSetEvent = TypedEvent<
  [string, string, string] & {
    stakedGmxTracker: string;
    bonusGmxTracker: string;
    feeGmxTracker: string;
  }
>;

export type StakeAmpedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    ampedAmount: BigNumber;
    ampAmount: BigNumber;
  }
>;

export type SwapEnabledSetEvent = TypedEvent<[boolean] & { enabled: boolean }>;

export type SwapRouterSetEvent = TypedEvent<
  [string, string] & { oldSwapRouter: string; newSwapRouter: string }
>;

export type TokenWithdrawnEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    account: string;
    amount: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UnstakeAmpedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    ampAmount: BigNumber;
    ampedAmount: BigNumber;
  }
>;

export type WethSetEvent = TypedEvent<
  [string, string] & { oldWeth: string; newWeth: string }
>;

export class AmpedStakingRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AmpedStakingRouterInterface;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    STAKE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UNSTAKE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    ampToken(overrides?: CallOverrides): Promise<[string]>;

    ampedToken(overrides?: CallOverrides): Promise<[string]>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _rewardRouter: string,
      _swapRouter: string,
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    minAmountOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rewardRouter(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardTrackers(
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeth(
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAmped(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<[string]>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    totalDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAmped(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  STAKE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UNSTAKE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  ampToken(overrides?: CallOverrides): Promise<string>;

  ampedToken(overrides?: CallOverrides): Promise<string>;

  bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

  depositTokens(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeGmxTracker(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ampedToken: string,
    _ampToken: string,
    _rewardRouter: string,
    _swapRouter: string,
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  minAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

  minReserveRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mintAndStakeGlp(
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minGlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndStakeGlpETH(
    _minUsdg: BigNumberish,
    _minGlp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rewardRouter(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmountOut(
    _minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinReserveRatio(
    _token: string,
    _ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRouter(
    _rewardRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardTrackers(
    _stakedGmxTracker: string,
    _bonusGmxTracker: string,
    _feeGmxTracker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapRouter(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeth(
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAmped(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAmpedForAccount(
    _account: string,
    _amount: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  totalDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAmped(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAmpedForAccount(
    _account: string,
    _amount: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    STAKE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UNSTAKE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    ampToken(overrides?: CallOverrides): Promise<string>;

    ampedToken(overrides?: CallOverrides): Promise<string>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<string>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeGmxTracker(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _rewardRouter: string,
      _swapRouter: string,
      _weth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    minAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rewardRouter(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardTrackers(
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapEnabled(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeth(_weth: string, overrides?: CallOverrides): Promise<void>;

    stakeAmped(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<string>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    totalDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstakeAmped(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovSet(address,address)"(
      oldGov?: string | null,
      newGov?: string | null
    ): TypedEventFilter<[string, string], { oldGov: string; newGov: string }>;

    GovSet(
      oldGov?: string | null,
      newGov?: string | null
    ): TypedEventFilter<[string, string], { oldGov: string; newGov: string }>;

    "HandlerSet(address,bool)"(
      handler?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { handler: string; isActive: boolean }
    >;

    HandlerSet(
      handler?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { handler: string; isActive: boolean }
    >;

    "Initialized(address,address,address,address,address)"(
      ampedToken?: null,
      ampToken?: null,
      rewardRouter?: null,
      swapRouter?: null,
      weth?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        ampedToken: string;
        ampToken: string;
        rewardRouter: string;
        swapRouter: string;
        weth: string;
      }
    >;

    Initialized(
      ampedToken?: null,
      ampToken?: null,
      rewardRouter?: null,
      swapRouter?: null,
      weth?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        ampedToken: string;
        ampToken: string;
        rewardRouter: string;
        swapRouter: string;
        weth: string;
      }
    >;

    "MinAmountOutSet(uint256)"(
      minAmountOut?: null
    ): TypedEventFilter<[BigNumber], { minAmountOut: BigNumber }>;

    MinAmountOutSet(
      minAmountOut?: null
    ): TypedEventFilter<[BigNumber], { minAmountOut: BigNumber }>;

    "MinReserveRatioSet(address,uint256)"(
      token?: null,
      ratio?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; ratio: BigNumber }
    >;

    MinReserveRatioSet(
      token?: null,
      ratio?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; ratio: BigNumber }
    >;

    "MintAndStakeGlp(address,address,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      token?: null,
      amount?: null,
      minUsdg?: null,
      minGlp?: null,
      glpAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        amount: BigNumber;
        minUsdg: BigNumber;
        minGlp: BigNumber;
        glpAmount: BigNumber;
      }
    >;

    MintAndStakeGlp(
      account?: string | null,
      token?: null,
      amount?: null,
      minUsdg?: null,
      minGlp?: null,
      glpAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        amount: BigNumber;
        minUsdg: BigNumber;
        minGlp: BigNumber;
        glpAmount: BigNumber;
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ReserveDeposited(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    ReserveDeposited(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "ReserveWithdrawn(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    ReserveWithdrawn(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "RewardRouterSet(address,address)"(
      oldRewardRouter?: string | null,
      newRewardRouter?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldRewardRouter: string; newRewardRouter: string }
    >;

    RewardRouterSet(
      oldRewardRouter?: string | null,
      newRewardRouter?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldRewardRouter: string; newRewardRouter: string }
    >;

    "RewardTrackersSet(address,address,address)"(
      stakedGmxTracker?: null,
      bonusGmxTracker?: null,
      feeGmxTracker?: null
    ): TypedEventFilter<
      [string, string, string],
      {
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        feeGmxTracker: string;
      }
    >;

    RewardTrackersSet(
      stakedGmxTracker?: null,
      bonusGmxTracker?: null,
      feeGmxTracker?: null
    ): TypedEventFilter<
      [string, string, string],
      {
        stakedGmxTracker: string;
        bonusGmxTracker: string;
        feeGmxTracker: string;
      }
    >;

    "StakeAmped(address,uint256,uint256)"(
      account?: string | null,
      ampedAmount?: null,
      ampAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; ampedAmount: BigNumber; ampAmount: BigNumber }
    >;

    StakeAmped(
      account?: string | null,
      ampedAmount?: null,
      ampAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; ampedAmount: BigNumber; ampAmount: BigNumber }
    >;

    "SwapEnabledSet(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    SwapEnabledSet(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "SwapRouterSet(address,address)"(
      oldSwapRouter?: string | null,
      newSwapRouter?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldSwapRouter: string; newSwapRouter: string }
    >;

    SwapRouterSet(
      oldSwapRouter?: string | null,
      newSwapRouter?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldSwapRouter: string; newSwapRouter: string }
    >;

    "TokenWithdrawn(address,address,uint256)"(
      token?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    TokenWithdrawn(
      token?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "UnstakeAmped(address,uint256,uint256)"(
      account?: string | null,
      ampAmount?: null,
      ampedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; ampAmount: BigNumber; ampedAmount: BigNumber }
    >;

    UnstakeAmped(
      account?: string | null,
      ampAmount?: null,
      ampedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; ampAmount: BigNumber; ampedAmount: BigNumber }
    >;

    "WethSet(address,address)"(
      oldWeth?: string | null,
      newWeth?: string | null
    ): TypedEventFilter<[string, string], { oldWeth: string; newWeth: string }>;

    WethSet(
      oldWeth?: string | null,
      newWeth?: string | null
    ): TypedEventFilter<[string, string], { oldWeth: string; newWeth: string }>;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UNSTAKE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    ampToken(overrides?: CallOverrides): Promise<BigNumber>;

    ampedToken(overrides?: CallOverrides): Promise<BigNumber>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _rewardRouter: string,
      _swapRouter: string,
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountOut(overrides?: CallOverrides): Promise<BigNumber>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouter(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardTrackers(
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeth(
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAmped(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAmped(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNSTAKE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _rewardRouter: string,
      _swapRouter: string,
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmountOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndStakeGlp(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndStakeGlpETH(
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmountOut(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardTrackers(
      _stakedGmxTracker: string,
      _bonusGmxTracker: string,
      _feeGmxTracker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeth(
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAmped(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedGmxTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAmped(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAmpedForAccount(
      _account: string,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
