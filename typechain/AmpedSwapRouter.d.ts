/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AmpedSwapRouterInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "ampToken()": FunctionFragment;
    "ampedToken()": FunctionFragment;
    "depositTokens(address,uint256)": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "emergencyWithdraw(address,address)": FunctionFragment;
    "getAmountOut(address,address,uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isWhitelistedPathToken(address)": FunctionFragment;
    "maxPriceDeviation()": FunctionFragment;
    "maxSlippage()": FunctionFragment;
    "minReserveRatio(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "setExternalDex(address,bool)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setMaxPriceDeviation(uint256)": FunctionFragment;
    "setMinReserveRatio(address,uint256)": FunctionFragment;
    "setSwapPath(address,address,address[])": FunctionFragment;
    "setSwapRatio(uint256)": FunctionFragment;
    "setWhitelistedPathToken(address,bool)": FunctionFragment;
    "swap(address,address,uint256)": FunctionFragment;
    "swapPaths(address,address,uint256)": FunctionFragment;
    "swapRatio()": FunctionFragment;
    "totalDeposited(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "useExternalDex()": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
    "withdrawTokens(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ampToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ampedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedPathToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minReserveRatio",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalDex",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReserveRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapPath",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedPathToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPaths",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swapRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useExternalDex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ampToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ampedToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedPathToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalDex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedPathToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapPaths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useExternalDex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "ExternalDexSet(address,bool)": EventFragment;
    "GovSet(address,address)": EventFragment;
    "HandlerSet(address,bool)": EventFragment;
    "MinReserveRatioSet(address,uint256)": EventFragment;
    "PathTokenWhitelisted(address,bool)": EventFragment;
    "Paused(address)": EventFragment;
    "ReserveDeposited(address,uint256)": EventFragment;
    "ReserveWithdrawn(address,uint256)": EventFragment;
    "Swap(address,address,address,uint256,uint256)": EventFragment;
    "SwapPathSet(address,address,address[])": EventFragment;
    "SwapRatioSet(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExternalDexSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinReserveRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PathTokenWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPathSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ExternalDexSetEvent = TypedEvent<
  [string, boolean] & { dexRouter: string; useExternal: boolean }
>;

export type GovSetEvent = TypedEvent<
  [string, string] & { oldGov: string; newGov: string }
>;

export type HandlerSetEvent = TypedEvent<
  [string, boolean] & { handler: string; isActive: boolean }
>;

export type MinReserveRatioSetEvent = TypedEvent<
  [string, BigNumber] & { token: string; ratio: BigNumber }
>;

export type PathTokenWhitelistedEvent = TypedEvent<
  [string, boolean] & { token: string; whitelisted: boolean }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ReserveDepositedEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type ReserveWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type SwapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    user: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SwapPathSetEvent = TypedEvent<
  [string, string, string[]] & {
    tokenA: string;
    tokenB: string;
    path: string[];
  }
>;

export type SwapRatioSetEvent = TypedEvent<
  [BigNumber] & { newRatio: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class AmpedSwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AmpedSwapRouterInterface;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ampToken(overrides?: CallOverrides): Promise<[string]>;

    ampedToken(overrides?: CallOverrides): Promise<[string]>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _dexRouter: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelistedPathToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxPriceDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    setExternalDex(
      _dexRouter: string,
      _useExternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceDeviation(
      _maxDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapPath(
      _tokenA: string,
      _tokenB: string,
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistedPathToken(
      _token: string,
      _whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useExternalDex(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  ampToken(overrides?: CallOverrides): Promise<string>;

  ampedToken(overrides?: CallOverrides): Promise<string>;

  depositTokens(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountOut(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ampedToken: string,
    _ampToken: string,
    _dexRouter: string,
    _priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isWhitelistedPathToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  minReserveRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  setExternalDex(
    _dexRouter: string,
    _useExternal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceDeviation(
    _maxDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinReserveRatio(
    _token: string,
    _ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapPath(
    _tokenA: string,
    _tokenB: string,
    _path: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapRatio(
    _ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistedPathToken(
    _token: string,
    _whitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapPaths(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  swapRatio(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useExternalDex(overrides?: CallOverrides): Promise<boolean>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _token: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ampToken(overrides?: CallOverrides): Promise<string>;

    ampedToken(overrides?: CallOverrides): Promise<string>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _dexRouter: string,
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isWhitelistedPathToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    setExternalDex(
      _dexRouter: string,
      _useExternal: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceDeviation(
      _maxDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapPath(
      _tokenA: string,
      _tokenB: string,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapRatio(
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistedPathToken(
      _token: string,
      _whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    swapRatio(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    useExternalDex(overrides?: CallOverrides): Promise<boolean>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExternalDexSet(address,bool)"(
      dexRouter?: null,
      useExternal?: null
    ): TypedEventFilter<
      [string, boolean],
      { dexRouter: string; useExternal: boolean }
    >;

    ExternalDexSet(
      dexRouter?: null,
      useExternal?: null
    ): TypedEventFilter<
      [string, boolean],
      { dexRouter: string; useExternal: boolean }
    >;

    "GovSet(address,address)"(
      oldGov?: string | null,
      newGov?: string | null
    ): TypedEventFilter<[string, string], { oldGov: string; newGov: string }>;

    GovSet(
      oldGov?: string | null,
      newGov?: string | null
    ): TypedEventFilter<[string, string], { oldGov: string; newGov: string }>;

    "HandlerSet(address,bool)"(
      handler?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { handler: string; isActive: boolean }
    >;

    HandlerSet(
      handler?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { handler: string; isActive: boolean }
    >;

    "MinReserveRatioSet(address,uint256)"(
      token?: null,
      ratio?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; ratio: BigNumber }
    >;

    MinReserveRatioSet(
      token?: null,
      ratio?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; ratio: BigNumber }
    >;

    "PathTokenWhitelisted(address,bool)"(
      token?: null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { token: string; whitelisted: boolean }
    >;

    PathTokenWhitelisted(
      token?: null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { token: string; whitelisted: boolean }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ReserveDeposited(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    ReserveDeposited(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "ReserveWithdrawn(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    ReserveWithdrawn(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "Swap(address,address,address,uint256,uint256)"(
      user?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        user: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    Swap(
      user?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        user: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    "SwapPathSet(address,address,address[])"(
      tokenA?: null,
      tokenB?: null,
      path?: null
    ): TypedEventFilter<
      [string, string, string[]],
      { tokenA: string; tokenB: string; path: string[] }
    >;

    SwapPathSet(
      tokenA?: null,
      tokenB?: null,
      path?: null
    ): TypedEventFilter<
      [string, string, string[]],
      { tokenA: string; tokenB: string; path: string[] }
    >;

    "SwapRatioSet(uint256)"(
      newRatio?: null
    ): TypedEventFilter<[BigNumber], { newRatio: BigNumber }>;

    SwapRatioSet(
      newRatio?: null
    ): TypedEventFilter<[BigNumber], { newRatio: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ampToken(overrides?: CallOverrides): Promise<BigNumber>;

    ampedToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _dexRouter: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistedPathToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    setExternalDex(
      _dexRouter: string,
      _useExternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPriceDeviation(
      _maxDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapPath(
      _tokenA: string,
      _tokenB: string,
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistedPathToken(
      _token: string,
      _whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRatio(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useExternalDex(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokens(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ampedToken: string,
      _ampToken: string,
      _dexRouter: string,
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelistedPathToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReserveRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setExternalDex(
      _dexRouter: string,
      _useExternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceDeviation(
      _maxDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinReserveRatio(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapPath(
      _tokenA: string,
      _tokenB: string,
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistedPathToken(
      _token: string,
      _whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useExternalDex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
